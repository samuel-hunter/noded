/* add.nod
 * For each line of space-separated integers, add them
 * together and print the result.
 */

// Read from user input and convert them into numbers
processor reader {
	$chr <- %in;

	if ($chr >= '0' && $chr <= '9') {
		// Append the digit $chr to the accumulator
		$acc = $acc * 10 + ($chr - '0');
		$thereisnum = 1;
	} else if ($chr == ' ') {
		if ($thereisnum) {
			%out <- 0; // op 0 = Next Number
			%out <- $acc;

			$acc = 0;
			$thereisnum = 0;
		}
	} else if ($chr == '\n') {
		if ($thereisnum) {
			%out <- 0; // op 0 = Next Number
			%out <- $acc;

			$acc = 0;
			$thereisnum = 0;
		}

		%out <- 1; // op 1 = Sum them up
		$unused <- %cont; // Wait until the printer is done to
				  // continue reading.
	} else {
		%err <- 0; // op 2 = User input error
		halt;
	}
}

// Accumulate all numbers and send them off
processor adder {
	$status <- %in;
	if ($status == 0) {
		// op 0 = Next Number
		$num <- %in;
		$total += $num;
	} else if ($status == 1) {
		// op 1 = Send the result
		%out <- $total;
		$total = 0;
	}
}

// Relay message to output on trigger.
processor error {
	$unused <- %trigger; // Wait for trigger
	while (1) {
		%idx <- $i++;
		$chr <- %in;

		if ($chr == 0)
			halt;

		%out <- $chr;
	}
}

buffer errormsg = "User input error\n";

processor printer {
	$num <- %in;
	$started = 0;

	%out <- ' '; // small indent to separate from numbers in
		     // console output.

	// Numbers range from 0 to 255, making our job a little easier

	// Print hundreds digit
	if ($num >= 100) {
		$chr = ($num / 100) + '0';
		%out <- $chr;

		$num %= 100;
		$started = 1;
	}

	// Print tens digit
	if ($started || $num >= 10) {
		$chr = ($num / 10) + '0';
		%out <- $chr;

		$num %= 10;
	}

	// Print ones digit and newline
	$chr = $num + '0';
	%out <- $chr;
	%out <- '\n';
	%cont <- 0; // Tell the reader to continue.
}


// Wiring
io.in -> reader.in;
reader.out -> adder.in;
reader.err -> error.trigger;
printer.cont -> reader.cont;

adder.out -> printer.in;
printer.out -> io.out;

error.idx -> errormsg.idx;
errormsg.elm -> error.in;
error.out -> io.err;

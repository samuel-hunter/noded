#!/bin/sh
set -e

# Defaults
[ -z "$CC" ] && CC="cc"
[ -z "$CFLAGS" ] && CFLAGS="--std=c99 -Werror -Wall -Wextra -Wpedantic -D_DEFAULT_SOURCE"
[ -z "$LDFLAGS" ] && LDFLAGS=""

for i in "$@"; do
    case $1 in
        CC=*)
            CC="${i#*=}"
            ;;
        CFLAGS=*)
            CFLAGS="${i#*=}"
            ;;
        LDFLAGS=*)
            LDFLAGS="${i#*=}"
            ;;
        --help | -h)
            cat <<EOF
Noded programming language configuration program.

Variables that will be exported to the makefile:

    CC                 The C compiler to be used to compile noded.
                       (default: cc)
    CFLAGS             The C flags.
                       (default: --std=c99 -Werror -Wall -Wextra -Wpedantic -D_DEFAULT_SOURCE)
    LDFLAGS            The C link flags.
                       (default: none)
Available options:
    --help             Shows this help.
EOF
            exit 0
            ;;
        *)
            echo "Unknown option: $i"
            exit 1
            ;;
    esac
done

objects="src/noded src/err src/token src/scanner src/ast src/dict src/parser src/util src/vm src/compiler tools/disasm test/test-vm test/test-compiler"
tools="disasm"
tests="test-vm test-compiler"

src () {
    printf "%s.c" "$1"
}

obj () {
    printf "build/%s.o" "${1#*/}"
}

print_objs () {
    for i in "$@"; do
        printf "%s " `obj $i`
    done
}

make_bin () {
    name="$1"
    shift

    printf '%s: %s\n' "$name" "`print_objs "$@"`"
    printf '\t$(CC) $(LDFLAGS) -o $@ %s$(LDLIBS)\n\n' "`print_objs "$@"`"
}

make_tool () {
    name="$1"
    shift
    make_bin "$name" "tools/$name" "$@"
}

make_testcmd () {
    printf 'test: $(TESTS)\n'
    for test in $tests; do
        printf '\t./%s\n' $test
    done
    printf '\n'
}

make_test () {
    name="$1"
    shift
    make_bin "$name" "test/$name" "$@"
}

make_deps () {
    printf '# Dependencies\n\n'
    for i in $objects; do
        printf '%s: %s\n' `obj $i` `src $i`
        printf '\t@mkdir -p build\n'
        printf '\t$(CC) $(CFLAGS) -o $@ -c %s\n' `src $i`
    done
}

echo "Prefix: $PREFIX"
echo "CC=$CC"
echo "CFLAGS=$CFLAGS"
echo "LDFLAGS=$LDFLAGS"
sed "
s|@@CC@@|$CC|g;
s|@@CFLAGS@@|$CFLAGS|g;
s|@@LDFLAGS@@|$LDFLAGS|g;

s|@@TOOLS@@|$tools|g;
s|@@TESTS@@|$tests|g
" < Makefile.in > Makefile

rm -f build.make
printf "OBJECTS = %s\n\n" "`print_objs $objects`" > build.make
make_bin noded src/noded src/err src/token src/scanner src/ast \
         src/dict src/parser src/util src/vm src/compiler >> build.make
make_tool disasm >> build.make
make_testcmd >> build.make
make_test test-vm src/vm src/util >> build.make
make_test test-compiler src/err src/token \
          src/scanner src/ast src/dict src/parser src/util src/vm src/compiler >> build.make
make_deps >> build.make


exit 0
